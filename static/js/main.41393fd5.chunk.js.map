{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uUAGaA,EAAK,SAACC,GAAD,OAEhB,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACL,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCLTC,EAAW,SAACR,GACvB,OAAO,qBAAKC,UAAU,YAAf,SACJD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLZM,G,MAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACtB,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCuCCG,E,kDAzCb,aAAc,IAAD,8BACX,gBAcFH,aAAa,SAACI,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAdrC,EAAKC,MAAM,CACTb,SAAU,GACVU,YAAa,IAJJ,E,qDASb,WAAoB,IAAD,OACjBI,MAAM,6CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAACT,SAAUkB,S,oBAOzC,WAAU,IAAD,EAEqBC,KAAKN,MAA3Bb,EAFC,EAEDA,SAASU,EAFR,EAEQA,YACTU,EAAiBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC5CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAGlD,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEW,YAAY,iBACZC,aAAce,KAAKf,eAGrB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAnCVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.41393fd5.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card=(props)=>(\n\n  <div className='card-container'>\n    <img \n      alt='monster' \n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n    <h2>{props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n  </div>\n\n)","import React from 'react'\nimport './card-list.styles.css'\nimport {Card} from '../card/card.component'\n\n\nexport const CardList = (props) =>{\n  return <div className='card-list'>\n    {props.monsters.map(monster=>(\n      <Card key={monster.id} monster={monster}/>))}\n    </div>\n}","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox= ({placeholder,handleChange}) =>(\n  <input \n    className='search'\n    type='search' \n    placeholder={placeholder}\n    onChange={handleChange}//called whenever something typed\n  />\n)\n\n","import './App.css';\nimport { Component } from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      monsters: [],\n      searchField: ''\n    };\n\n  }\n\n  componentDidMount(){\n    fetch('http://jsonplaceholder.typicode.com/users')\n    .then(response=> response.json())\n    .then(users=> this.setState({monsters: users}));\n  }\n\n  handleChange=(e)=>{\n    this.setState({searchField: e.target.value})\n  }\n\n  render() {\n\n    const{monsters,searchField}=this.state;\n    const filteredMonsters=monsters.filter(monster=>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    \n    )\n    return(\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n          placeholder='search monster'\n          handleChange={this.handleChange}\n        />\n        \n        <CardList monsters={filteredMonsters}></CardList>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}